Index: lib/actions/user.actions.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'use server'\r\n\r\nimport { supabaseAdmin, getCurrentUser } from '@/lib/auth-server'\r\nimport { validateUser } from '@/lib/utils/validation'\r\nimport { handleApiError, AuthenticationError } from '@/lib/utils/errors'\r\nimport { sanitizeString } from '@/lib/utils/validation'\r\nimport { revalidatePath } from 'next/cache'\r\n\r\nexport async function getUserProfile() {\r\n  try {\r\n    const user = await getCurrentUser()\r\n    if (!user) {\r\n      throw new AuthenticationError()\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      data: user\r\n    }\r\n\r\n  } catch (error) {\r\n    const { message } = handleApiError(error)\r\n    return {\r\n      success: false,\r\n      error: message\r\n    }\r\n  }\r\n}\r\n\r\nexport async function updateUserProfile(formData: FormData) {\r\n  try {\r\n    const user = await getCurrentUser()\r\n    if (!user) {\r\n      throw new AuthenticationError()\r\n    }\r\n\r\n    const name = formData.get('name') as string\r\n\r\n    // Validate input\r\n    const validation = validateUser({ name })\r\n    if (!validation.success) {\r\n      return {\r\n        success: false,\r\n        error: validation.errors?.[0]?.message || 'Invalid input'\r\n      }\r\n    }\r\n\r\n    // Sanitize name\r\n    const sanitizedName = sanitizeString(name)\r\n\r\n    const { data: updated, error } = await supabaseAdmin\r\n      .from('users')\r\n      .update({ name: sanitizedName })\r\n      .eq('id', user.id)\r\n      .select()\r\n      .single()\r\n\r\n    if (error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    revalidatePath('/account')\r\n\r\n    return {\r\n      success: true,\r\n      data: updated\r\n    }\r\n\r\n  } catch (error) {\r\n    const { message } = handleApiError(error)\r\n    return {\r\n      success: false,\r\n      error: message\r\n    }\r\n  }\r\n}\r\n\r\nexport async function getUserBookings() {\r\n  try {\r\n    const user = await getCurrentUser()\r\n    if (!user) {\r\n      throw new AuthenticationError()\r\n    }\r\n\r\n    const { data: bookings, error } = await supabaseAdmin\r\n      .from('bookings')\r\n      .select(`\r\n        *,\r\n        restaurants (\r\n          name,\r\n          location,\r\n          cuisine,\r\n          image_url\r\n        )\r\n      `)\r\n      .eq('user_id', user.id)\r\n      .order('created_at', { ascending: false })\r\n\r\n    if (error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      data: bookings\r\n    }\r\n\r\n  } catch (error) {\r\n    const { message } = handleApiError(error)\r\n    return {\r\n      success: false,\r\n      error: message\r\n    }\r\n  }\r\n}\r\n\r\nexport async function getUserRewards() {\r\n  try {\r\n    const user = await getCurrentUser()\r\n    if (!user) {\r\n      throw new AuthenticationError()\r\n    }\r\n\r\n    const { data: rewards, error } = await supabaseAdmin\r\n      .from('rewards')\r\n      .select('*')\r\n      .eq('user_id', user.id)\r\n      .order('created_at', { ascending: false })\r\n\r\n    if (error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      data: rewards\r\n    }\r\n\r\n  } catch (error) {\r\n    const { message } = handleApiError(error)\r\n    return {\r\n      success: false,\r\n      error: message\r\n    }\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/actions/user.actions.ts b/lib/actions/user.actions.ts
--- a/lib/actions/user.actions.ts	(revision 911811e8c35d37bf2e7329a689e0b8b592487c5e)
+++ b/lib/actions/user.actions.ts	(date 1758902198884)
@@ -1,11 +1,45 @@
 'use server'
 
-import { supabaseAdmin, getCurrentUser } from '@/lib/auth-server'
+import { supabaseAdmin } from '@/lib/auth-server'
+import { createClient } from '@supabase/supabase-js'
+import { cookies } from 'next/headers'
 import { validateUser } from '@/lib/utils/validation'
 import { handleApiError, AuthenticationError } from '@/lib/utils/errors'
 import { sanitizeString } from '@/lib/utils/validation'
 import { revalidatePath } from 'next/cache'
 
+// Get current user from session
+async function getCurrentUser() {
+  const supabase = createClient(
+    process.env.NEXT_PUBLIC_SUPABASE_URL!,
+    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
+    {
+      cookies: {
+        get(name: string) {
+          return cookies().get(name)?.value
+        },
+      },
+    }
+  )
+
+  try {
+    const { data: { user }, error } = await supabase.auth.getUser()
+
+    if (error || !user) return null
+
+    // Get user profile with role
+    const { data: profile } = await supabaseAdmin
+      .from('users')
+      .select('*')
+      .eq('id', user.id)
+      .single()
+
+    return profile
+  } catch (error) {
+    console.error('Error getting current user:', error)
+    return null
+  }
+}
 export async function getUserProfile() {
   try {
     const user = await getCurrentUser()
Index: lib/actions/auth.actions.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'use server'\r\n\r\nimport { supabaseAdmin, createServerSupabaseClient } from '@/lib/auth-server'\r\nimport { validateAuth } from '@/lib/utils/validation'\r\nimport { handleApiError, AuthenticationError, ValidationError } from '@/lib/utils/errors'\r\nimport { sanitizeString, sanitizeEmail } from '@/lib/utils/validation'\r\nimport { redirect } from 'next/navigation'\r\nimport { cookies } from 'next/headers'\r\n\r\nexport async function registerUser(formData: FormData) {\r\n  try {\r\n    const email = formData.get('email') as string\r\n    const password = formData.get('password') as string\r\n    const name = formData.get('name') as string\r\n\r\n    // Validate input\r\n    const validation = validateAuth({ email, password, name })\r\n    if (!validation.success) {\r\n      return {\r\n        success: false,\r\n        error: validation.errors?.[0]?.message || 'Invalid input'\r\n      }\r\n    }\r\n\r\n    // Sanitize inputs\r\n    const sanitizedEmail = sanitizeEmail(email)\r\n    const sanitizedName = name ? sanitizeString(name) : ''\r\n\r\n    // Create user with Supabase Auth\r\n    const { data: authData, error: authError } = await supabaseAdmin.auth.admin.createUser({\r\n      email: sanitizedEmail,\r\n      password,\r\n      email_confirm: true,\r\n      user_metadata: { name: sanitizedName }\r\n    })\r\n\r\n    if (authError) {\r\n      throw new ValidationError(authError.message)\r\n    }\r\n\r\n    // Create user profile with default customer role\r\n    const { error: profileError } = await supabaseAdmin\r\n      .from('users')\r\n      .insert({\r\n        id: authData.user.id,\r\n        email: sanitizedEmail,\r\n        name: sanitizedName,\r\n        role: 'customer',\r\n        points: 0\r\n      })\r\n\r\n    if (profileError) {\r\n      // Clean up auth user if profile creation fails\r\n      await supabaseAdmin.auth.admin.deleteUser(authData.user.id)\r\n      throw new Error(profileError.message || 'Failed to create user profile')\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      message: 'User created successfully',\r\n      data: {\r\n        id: authData.user.id,\r\n        email: authData.user.email,\r\n        name: sanitizedName,\r\n        role: 'customer',\r\n        points: 0\r\n      }\r\n    }\r\n\r\n  } catch (error) {\r\n    const { message } = handleApiError(error)\r\n    return {\r\n      success: false,\r\n      error: message\r\n    }\r\n  }\r\n}\r\n\r\nexport async function loginUser(formData: FormData) {\r\n  try {\r\n    const email = formData.get('email') as string\r\n    const password = formData.get('password') as string\r\n\r\n    // Validate input\r\n    const validation = validateAuth({ email, password })\r\n    if (!validation.success) {\r\n      return {\r\n        success: false,\r\n        error: validation.errors?.[0]?.message || 'Invalid input'\r\n      }\r\n    }\r\n\r\n    const supabase = createServerSupabaseClient()\r\n    \r\n    // Sign in user with Supabase auth\r\n    const { data, error } = await supabase.auth.signInWithPassword({\r\n      email: email.toLowerCase().trim(),\r\n      password\r\n    })\r\n\r\n    if (error) {\r\n      throw new AuthenticationError(error.message)\r\n    }\r\n\r\n    // Get user profile with role\r\n    const { data: profile } = await supabase\r\n      .from('users')\r\n      .select('*')\r\n      .eq('id', data.user.id)\r\n      .single()\r\n\r\n    return {\r\n      success: true,\r\n      message: 'Login successful',\r\n      data: {\r\n        id: data.user.id,\r\n        email: data.user.email,\r\n        name: profile?.name || '',\r\n        role: profile?.role || 'customer',\r\n        points: profile?.points || 0\r\n      }\r\n    }\r\n\r\n  } catch (error) {\r\n    const { message } = handleApiError(error)\r\n    return {\r\n      success: false,\r\n      error: message\r\n    }\r\n  }\r\n}\r\n\r\nexport async function logoutUser() {\r\n  try {\r\n    const supabase = createServerSupabaseClient()\r\n    await supabase.auth.signOut()\r\n    \r\n    return {\r\n      success: true,\r\n      message: 'Logout successful'\r\n    }\r\n  } catch (error) {\r\n    const { message } = handleApiError(error)\r\n    return {\r\n      success: false,\r\n      error: message\r\n    }\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/actions/auth.actions.ts b/lib/actions/auth.actions.ts
--- a/lib/actions/auth.actions.ts	(revision 911811e8c35d37bf2e7329a689e0b8b592487c5e)
+++ b/lib/actions/auth.actions.ts	(date 1758902164030)
@@ -1,12 +1,26 @@
 'use server'
 
-import { supabaseAdmin, createServerSupabaseClient } from '@/lib/auth-server'
+import { supabaseAdmin } from '@/lib/auth-server'
+import { createClient } from '@supabase/supabase-js'
+import { cookies } from 'next/headers'
 import { validateAuth } from '@/lib/utils/validation'
 import { handleApiError, AuthenticationError, ValidationError } from '@/lib/utils/errors'
 import { sanitizeString, sanitizeEmail } from '@/lib/utils/validation'
-import { redirect } from 'next/navigation'
-import { cookies } from 'next/headers'
 
+// Create server client for handling user sessions
+function createServerSupabaseClient() {
+  return createClient(
+    process.env.NEXT_PUBLIC_SUPABASE_URL!,
+    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
+    {
+      cookies: {
+        get(name: string) {
+          return cookies().get(name)?.value
+        },
+      },
+    }
+  )
+}
 export async function registerUser(formData: FormData) {
   try {
     const email = formData.get('email') as string
@@ -42,7 +56,8 @@
     const { error: profileError } = await supabaseAdmin
       .from('users')
       .insert({
-        id: authData.user.id,
+          Insert: undefined,
+          id: authData.user.id,
         email: sanitizedEmail,
         name: sanitizedName,
         role: 'customer',
Index: lib/actions/booking.actions.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'use server'\r\n\r\nimport { supabaseAdmin, getCurrentUser } from '@/lib/auth-server'\r\nimport { validateBooking } from '@/lib/utils/validation'\r\nimport { handleApiError, AuthenticationError, ValidationError } from '@/lib/utils/errors'\r\nimport { sendBookingConfirmationEmail } from '@/lib/email-triggers'\r\nimport { revalidatePath } from 'next/cache'\r\n\r\nexport async function createBooking(formData: FormData) {\r\n  try {\r\n    const user = await getCurrentUser()\r\n    if (!user) {\r\n      throw new AuthenticationError()\r\n    }\r\n\r\n    const restaurant_id = formData.get('restaurant_id') as string\r\n    const date = formData.get('date') as string\r\n    const time = formData.get('time') as string\r\n    const party_size = parseInt(formData.get('party_size') as string) || 0\r\n    const special_requests = formData.get('special_requests') as string\r\n\r\n    // Validate input\r\n    const bookingData = {\r\n      restaurant_id,\r\n      date,\r\n      time,\r\n      party_size,\r\n      special_requests\r\n    }\r\n    \r\n    const validation = validateBooking(bookingData)\r\n    if (!validation.success) {\r\n      return {\r\n        success: false,\r\n        error: validation.errors?.[0]?.message || 'Invalid booking data',\r\n        errors: validation.errors\r\n      }\r\n    }\r\n\r\n    // Verify restaurant exists\r\n    const { data: restaurant, error: restaurantError } = await supabaseAdmin\r\n      .from('restaurants')\r\n      .select('id, name, capacity')\r\n      .eq('id', restaurant_id)\r\n      .single()\r\n\r\n    if (restaurantError || !restaurant) {\r\n      throw new ValidationError('Restaurant not found')\r\n    }\r\n\r\n    // Use the validation function\r\n    const { data: result, error } = await supabaseAdmin\r\n      .rpc('create_booking_with_validation', {\r\n        user_id_param: user.id,\r\n        restaurant_id_param: restaurant_id,\r\n        date_param: date,\r\n        time_param: time,\r\n        party_size_param: party_size,\r\n        special_requests_param: special_requests?.trim() || null\r\n      })\r\n\r\n    if (error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    if (!result.success) {\r\n      return {\r\n        success: false,\r\n        error: result.error,\r\n        available_times: result.available_times\r\n      }\r\n    }\r\n\r\n    // Send confirmation email if booking was auto-confirmed\r\n    if (result.booking_id) {\r\n      const { data: createdBooking } = await supabaseAdmin\r\n        .from('bookings')\r\n        .select('status')\r\n        .eq('id', result.booking_id)\r\n        .single()\r\n\r\n      if (createdBooking?.status === 'confirmed') {\r\n        sendBookingConfirmationEmail(result.booking_id).catch(error => {\r\n          console.error('Failed to send booking confirmation email:', error)\r\n        })\r\n      }\r\n    }\r\n\r\n    revalidatePath('/account')\r\n    \r\n    return {\r\n      success: true,\r\n      message: 'Booking created successfully',\r\n      data: { booking_id: result.booking_id }\r\n    }\r\n\r\n  } catch (error) {\r\n    const { message } = handleApiError(error)\r\n    return {\r\n      success: false,\r\n      error: message\r\n    }\r\n  }\r\n}\r\n\r\nexport async function updateBookingStatus(bookingId: string, status: 'confirmed' | 'cancelled') {\r\n  try {\r\n    const user = await getCurrentUser()\r\n    if (!user) {\r\n      throw new AuthenticationError()\r\n    }\r\n\r\n    // Get booking to check permissions\r\n    const { data: booking } = await supabaseAdmin\r\n      .from('bookings')\r\n      .select('user_id, restaurant_id')\r\n      .eq('id', bookingId)\r\n      .single()\r\n\r\n    if (!booking) {\r\n      throw new ValidationError('Booking not found')\r\n    }\r\n\r\n    // Check permissions\r\n    const isOwner = booking.user_id === user.id\r\n    const isAdmin = user.role === 'admin'\r\n    const canManageRestaurant = await supabaseAdmin\r\n      .from('restaurants')\r\n      .select('admin_id')\r\n      .eq('id', booking.restaurant_id)\r\n      .eq('admin_id', user.id)\r\n      .single()\r\n      .then(({ data }) => !!data)\r\n\r\n    if (!isAdmin && !isOwner && !canManageRestaurant) {\r\n      throw new ValidationError('Forbidden')\r\n    }\r\n\r\n    const { data: updated, error } = await supabaseAdmin\r\n      .from('bookings')\r\n      .update({ status })\r\n      .eq('id', bookingId)\r\n      .select()\r\n      .single()\r\n\r\n    if (error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    revalidatePath('/account')\r\n    revalidatePath('/admin')\r\n\r\n    return {\r\n      success: true,\r\n      message: `Booking ${status} successfully`,\r\n      data: updated\r\n    }\r\n\r\n  } catch (error) {\r\n    const { message } = handleApiError(error)\r\n    return {\r\n      success: false,\r\n      error: message\r\n    }\r\n  }\r\n}\r\n\r\nexport async function cancelBooking(bookingId: string) {\r\n  return updateBookingStatus(bookingId, 'cancelled')\r\n}\r\n\r\nexport async function confirmBooking(bookingId: string) {\r\n  return updateBookingStatus(bookingId, 'confirmed')\r\n}\r\n\r\nexport async function updateBooking(bookingId: string, updates: {\r\n  date?: string\r\n  time?: string\r\n  party_size?: number\r\n  special_requests?: string\r\n}) {\r\n  try {\r\n    const user = await getCurrentUser()\r\n    if (!user) {\r\n      throw new AuthenticationError()\r\n    }\r\n\r\n    // Get booking to check permissions\r\n    const { data: booking } = await supabaseAdmin\r\n      .from('bookings')\r\n      .select('user_id, restaurant_id')\r\n      .eq('id', bookingId)\r\n      .single()\r\n\r\n    if (!booking) {\r\n      throw new ValidationError('Booking not found')\r\n    }\r\n\r\n    // Check permissions\r\n    const isOwner = booking.user_id === user.id\r\n    const isAdmin = user.role === 'admin'\r\n\r\n    if (!isAdmin && !isOwner) {\r\n      throw new ValidationError('Forbidden')\r\n    }\r\n\r\n    const { data: updated, error } = await supabaseAdmin\r\n      .from('bookings')\r\n      .update(updates)\r\n      .eq('id', bookingId)\r\n      .select()\r\n      .single()\r\n\r\n    if (error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    revalidatePath('/account')\r\n\r\n    return {\r\n      success: true,\r\n      message: 'Booking updated successfully',\r\n      data: updated\r\n    }\r\n\r\n  } catch (error) {\r\n    const { message } = handleApiError(error)\r\n    return {\r\n      success: false,\r\n      error: message\r\n    }\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/actions/booking.actions.ts b/lib/actions/booking.actions.ts
--- a/lib/actions/booking.actions.ts	(revision 911811e8c35d37bf2e7329a689e0b8b592487c5e)
+++ b/lib/actions/booking.actions.ts	(date 1758902274724)
@@ -1,11 +1,45 @@
 'use server'
 
-import { supabaseAdmin, getCurrentUser } from '@/lib/auth-server'
+import { supabaseAdmin } from '@/lib/auth-server'
+import { createClient } from '@supabase/supabase-js'
+import { cookies } from 'next/headers'
 import { validateBooking } from '@/lib/utils/validation'
 import { handleApiError, AuthenticationError, ValidationError } from '@/lib/utils/errors'
-import { sendBookingConfirmationEmail } from '@/lib/email-triggers'
 import { revalidatePath } from 'next/cache'
 
+// Get current user from session
+async function getCurrentUser() {
+  const supabase = createClient(
+    process.env.NEXT_PUBLIC_SUPABASE_URL!,
+    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
+    {
+      cookies: {
+        get(name: string) {
+          return cookies().get(name)?.value
+        },
+      },
+    }
+  )
+
+  try {
+    const { data: { user }, error } = await supabase.auth.getUser()
+
+    if (error || !user) return null
+
+    // Get user profile with role
+    const { data: profile } = await supabaseAdmin
+      .from('users')
+      .select('*')
+      .eq('id', user.id)
+      .single()
+
+    return profile
+  } catch (error) {
+    console.error('Error getting current user:', error)
+    return null
+  }
+}
+
 export async function createBooking(formData: FormData) {
   try {
     const user = await getCurrentUser()
Index: .bolt/prompt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>For all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\r\n\r\nWhen using client-side hooks (useState and useEffect) in a component that's being treated as a Server Component by Next.js, always add the \"use client\" directive at the top of the file.\r\n\r\nDo not write code that will trigger this error: \"Warning: Extra attributes from the server: %s%s\"\"class,style\"\r\n\r\nBy default, this template supports JSX syntax with Tailwind CSS classes, the shadcn/ui library, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\r\n\r\nUse icons from lucide-react for logos.\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.bolt/prompt b/.bolt/prompt
--- a/.bolt/prompt	(revision 911811e8c35d37bf2e7329a689e0b8b592487c5e)
+++ b/.bolt/prompt	(date 1758901099849)
@@ -1,3 +1,4 @@
+
 For all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.
 
 When using client-side hooks (useState and useEffect) in a component that's being treated as a Server Component by Next.js, always add the "use client" directive at the top of the file.
Index: app/restaurant/[id]/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { supabase } from '@/lib/supabase'\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Badge } from '@/components/ui/badge'\r\nimport { ArrowLeft, MapPin, Users, Clock, Star, Utensils, Phone, Globe } from 'lucide-react'\r\nimport Image from 'next/image'\r\nimport Link from 'next/link'\r\nimport { redirect } from 'next/navigation'\r\n\r\nexport async function generateStaticParams() {\r\n  try {\r\n    const { data: restaurants, error } = await supabase\r\n      .from('restaurants')\r\n      .select('id')\r\n    \r\n    if (error) throw error\r\n    \r\n    if (!restaurants || restaurants.length === 0) {\r\n      console.warn('generateStaticParams for /restaurant/[id]/page.tsx returned no restaurants. Check database seeding.')\r\n      return []\r\n    }\r\n\r\n    const params = restaurants.map((restaurant: any) => ({\r\n      id: restaurant.id.toString(),\r\n    }))\r\n    \r\n    console.log('Generated static params for /restaurant/[id]:', params.map(p => p.id))\r\n    return params\r\n  } catch (error) {\r\n    console.error('Error in generateStaticParams:', error)\r\n    return []\r\n  }\r\n}\r\n\r\nasync function getRestaurant(id: string) {\r\n  try {\r\n    const { data: restaurant, error } = await supabase\r\n      .from('restaurants')\r\n      .select('*')\r\n      .eq('id', id)\r\n      .single()\r\n    \r\n    if (error) throw error\r\n    return restaurant\r\n  } catch {\r\n    return null\r\n  }\r\n}\r\n\r\nasync function getRestaurantBookings(id: string) {\r\n  try {\r\n    // This would require admin access, so we'll skip it for now\r\n    // In a real app, this would be a separate API endpoint\r\n    return []\r\n  } catch {\r\n    return []\r\n  }\r\n}\r\n\r\nexport default async function RestaurantDetailPage({ params }: { params: { id: string } }) {\r\n  const restaurant = await getRestaurant(params.id)\r\n  \r\n  if (!restaurant) {\r\n    redirect('/')\r\n  }\r\n\r\n  const bookings = await getRestaurantBookings(params.id)\r\n  const totalBookings = bookings.length\r\n  const avgPartySize = bookings.length > 0 \r\n    ? Math.round(bookings.reduce((sum, b) => sum + (b.party_size || 0), 0) / bookings.length)\r\n    : 0\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-slate-50\">\r\n      <header className=\"border-b bg-white sticky top-0 z-50\">\r\n        <div className=\"container mx-auto px-4 py-4\">\r\n          <Button variant=\"ghost\" asChild>\r\n            <Link href=\"/\">\r\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\r\n              Back to Restaurants\r\n            </Link>\r\n          </Button>\r\n        </div>\r\n      </header>\r\n\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        {/* Hero Section */}\r\n        <div className=\"relative h-96 w-full rounded-xl overflow-hidden mb-8\">\r\n          <Image\r\n            src={restaurant.image_url || '/placeholder-restaurant.jpg'}\r\n            alt={restaurant.name}\r\n            fill\r\n            className=\"object-cover\"\r\n          />\r\n          <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 to-transparent\" />\r\n          <div className=\"absolute bottom-6 left-6 text-white\">\r\n            <div className=\"flex items-center gap-3 mb-2\">\r\n              <h1 className=\"text-4xl font-bold\">{restaurant.name}</h1>\r\n              {restaurant.cuisine && (\r\n                <Badge variant=\"secondary\" className=\"bg-white/20 text-white border-white/30\">\r\n                  <Utensils className=\"w-3 h-3 mr-1\" />\r\n                  {restaurant.cuisine}\r\n                </Badge>\r\n              )}\r\n            </div>\r\n            {restaurant.location && (\r\n              <div className=\"flex items-center gap-1 text-white/90\">\r\n                <MapPin className=\"w-4 h-4\" />\r\n                {restaurant.location}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"grid lg:grid-cols-3 gap-8\">\r\n          {/* Main Content */}\r\n          <div className=\"lg:col-span-2 space-y-6\">\r\n            {/* About */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>About {restaurant.name}</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <p className=\"text-muted-foreground leading-relaxed\">\r\n                  {restaurant.description || 'Experience exceptional dining at this wonderful restaurant.'}\r\n                </p>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Sample Menu */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Sample Menu</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"grid md:grid-cols-2 gap-6\">\r\n                  <div>\r\n                    <h4 className=\"font-semibold mb-3\">Appetizers</h4>\r\n                    <div className=\"space-y-2 text-sm\">\r\n                      <div className=\"flex justify-between\">\r\n                        <span>Seasonal Soup</span>\r\n                        <span className=\"text-muted-foreground\">$12</span>\r\n                      </div>\r\n                      <div className=\"flex justify-between\">\r\n                        <span>Chef's Salad</span>\r\n                        <span className=\"text-muted-foreground\">$16</span>\r\n                      </div>\r\n                      <div className=\"flex justify-between\">\r\n                        <span>Artisan Bread</span>\r\n                        <span className=\"text-muted-foreground\">$8</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div>\r\n                    <h4 className=\"font-semibold mb-3\">Main Courses</h4>\r\n                    <div className=\"space-y-2 text-sm\">\r\n                      <div className=\"flex justify-between\">\r\n                        <span>Signature Dish</span>\r\n                        <span className=\"text-muted-foreground\">$28</span>\r\n                      </div>\r\n                      <div className=\"flex justify-between\">\r\n                        <span>Fresh Catch</span>\r\n                        <span className=\"text-muted-foreground\">$32</span>\r\n                      </div>\r\n                      <div className=\"flex justify-between\">\r\n                        <span>Chef's Special</span>\r\n                        <span className=\"text-muted-foreground\">$35</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <p className=\"text-xs text-muted-foreground mt-4\">\r\n                  * Menu items and prices are subject to change. Please contact the restaurant for current offerings.\r\n                </p>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Reviews Placeholder */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <Star className=\"w-5 h-5 text-yellow-500\" />\r\n                  Customer Reviews\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"border-l-4 border-primary pl-4\">\r\n                    <div className=\"flex items-center gap-2 mb-1\">\r\n                      <div className=\"flex\">\r\n                        {[1,2,3,4,5].map((star) => (\r\n                          <Star key={star} className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\r\n                        ))}\r\n                      </div>\r\n                      <span className=\"text-sm font-medium\">Sarah M.</span>\r\n                    </div>\r\n                    <p className=\"text-sm text-muted-foreground\">\r\n                      \"Absolutely wonderful experience! The food was exceptional and the service was top-notch. Will definitely be returning.\"\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"border-l-4 border-primary pl-4\">\r\n                    <div className=\"flex items-center gap-2 mb-1\">\r\n                      <div className=\"flex\">\r\n                        {[1,2,3,4,5].map((star) => (\r\n                          <Star key={star} className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\r\n                        ))}\r\n                      </div>\r\n                      <span className=\"text-sm font-medium\">James R.</span>\r\n                    </div>\r\n                    <p className=\"text-sm text-muted-foreground\">\r\n                      \"Great atmosphere and delicious food. The booking process was seamless and I earned points too!\"\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n\r\n          {/* Sidebar */}\r\n          <div className=\"space-y-6\">\r\n            {/* Booking CTA */}\r\n            <Card className=\"border-primary\">\r\n              <CardContent className=\"p-6 text-center\">\r\n                <div className=\"mb-4\">\r\n                  <div className=\"text-2xl font-bold text-primary mb-1\">Book Now</div>\r\n                  <p className=\"text-sm text-muted-foreground\">Earn 10 reward points</p>\r\n                </div>\r\n                <Button asChild className=\"w-full\" size=\"lg\">\r\n                  <Link href={`/book/${restaurant.id}`}>\r\n                    Reserve Your Table\r\n                  </Link>\r\n                </Button>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Restaurant Info */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Restaurant Information</CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                {restaurant.location && (\r\n                  <div className=\"flex items-start gap-3\">\r\n                    <MapPin className=\"w-5 h-5 text-muted-foreground mt-0.5\" />\r\n                    <div>\r\n                      <p className=\"font-medium\">Location</p>\r\n                      <p className=\"text-sm text-muted-foreground\">{restaurant.location}</p>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                \r\n                {restaurant.capacity && (\r\n                  <div className=\"flex items-start gap-3\">\r\n                    <Users className=\"w-5 h-5 text-muted-foreground mt-0.5\" />\r\n                    <div>\r\n                      <p className=\"font-medium\">Capacity</p>\r\n                      <p className=\"text-sm text-muted-foreground\">Up to {restaurant.capacity} guests</p>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                <div className=\"flex items-start gap-3\">\r\n                  <Clock className=\"w-5 h-5 text-muted-foreground mt-0.5\" />\r\n                  <div>\r\n                    <p className=\"font-medium\">Hours</p>\r\n                    <div className=\"text-sm text-muted-foreground\">\r\n                      <p>Mon-Thu: 11:00 AM - 10:00 PM</p>\r\n                      <p>Fri-Sat: 11:00 AM - 11:00 PM</p>\r\n                      <p>Sunday: 12:00 PM - 9:00 PM</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex items-start gap-3\">\r\n                  <Phone className=\"w-5 h-5 text-muted-foreground mt-0.5\" />\r\n                  <div>\r\n                    <p className=\"font-medium\">Contact</p>\r\n                    <p className=\"text-sm text-muted-foreground\">(555) 123-4567</p>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Stats */}\r\n            {totalBookings > 0 && (\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Popular Choice</CardTitle>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-3\">\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <span className=\"text-sm text-muted-foreground\">Recent Bookings</span>\r\n                    <span className=\"font-semibold\">{totalBookings}</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <span className=\"text-sm text-muted-foreground\">Avg. Party Size</span>\r\n                    <span className=\"font-semibold\">{avgPartySize} people</span>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/restaurant/[id]/page.tsx b/app/restaurant/[id]/page.tsx
--- a/app/restaurant/[id]/page.tsx	(revision 911811e8c35d37bf2e7329a689e0b8b592487c5e)
+++ b/app/restaurant/[id]/page.tsx	(date 1758901099803)
@@ -142,7 +142,7 @@
                         <span className="text-muted-foreground">$12</span>
                       </div>
                       <div className="flex justify-between">
-                        <span>Chef's Salad</span>
+                        <span>Chef&#39;s Salad</span>
                         <span className="text-muted-foreground">$16</span>
                       </div>
                       <div className="flex justify-between">
@@ -163,7 +163,7 @@
                         <span className="text-muted-foreground">$32</span>
                       </div>
                       <div className="flex justify-between">
-                        <span>Chef's Special</span>
+                        <span>Chef&#39;s Special</span>
                         <span className="text-muted-foreground">$35</span>
                       </div>
                     </div>
Index: components/auth/AuthButton.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'use client'\r\n\r\nimport { useState, useEffect } from 'react'\r\nimport { Button } from '@/components/ui/button'\r\nimport { getUserProfile } from '@/lib/actions/user.actions'\r\nimport { logoutUser } from '@/lib/actions/auth.actions'\r\nimport type { User } from '@/lib/types'\r\nimport { LogIn, LogOut, User as UserIcon } from 'lucide-react'\r\n\r\n\r\nexport default function AuthButton() {\r\n  const [user, setUser] = useState<User | null>(null)\r\n  const [loading, setLoading] = useState(false)\r\n  const [initialLoading, setInitialLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    const getProfile = async () => {\r\n      try {\r\n        const response = await getUserProfile()\r\n        if (response.success && response.data) {\r\n          setUser(response.data)\r\n        }\r\n      } catch (error) {\r\n        setUser(null)\r\n      } finally {\r\n        setInitialLoading(false)\r\n      }\r\n    }\r\n    \r\n    getProfile()\r\n  }, [])\r\n\r\n  const handleSignOut = async () => {\r\n    if (loading) return\r\n    \r\n    setLoading(true)\r\n    try {\r\n      await logoutUser()\r\n      setUser(null)\r\n    } catch (error) {\r\n      // Still clear user state even if logout request fails\r\n      setUser(null)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  // Show loading state during initial profile fetch\r\n  if (initialLoading) {\r\n    return (\r\n      <Button size=\"sm\" disabled>\r\n        Loading...\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  if (user) {\r\n    return (\r\n      <div className=\"flex items-center gap-2\">\r\n        <Button variant=\"outline\" size=\"sm\" asChild>\r\n          <a href=\"/account\">\r\n            <UserIcon className=\"w-4 h-4 mr-1\" />\r\n            Account ({user.points} pts)\r\n          </a>\r\n        </Button>\r\n        <Button variant=\"outline\" size=\"sm\" onClick={handleSignOut} disabled={loading}>\r\n          <LogOut className=\"w-4 h-4 mr-1\" />\r\n          {loading ? 'Signing Out...' : 'Sign Out'}\r\n        </Button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex items-center gap-2\">\r\n      <Button variant=\"outline\" size=\"sm\" asChild>\r\n        <a href=\"/signin\">\r\n          <LogIn className=\"w-4 h-4 mr-1\" />\r\n          Sign In\r\n        </a>\r\n      </Button>\r\n      <Button size=\"sm\" asChild>\r\n        <a href=\"/signup\">\r\n          Sign Up\r\n        </a>\r\n      </Button>\r\n    </div>\r\n  )\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/components/auth/AuthButton.tsx b/components/auth/AuthButton.tsx
--- a/components/auth/AuthButton.tsx	(revision 911811e8c35d37bf2e7329a689e0b8b592487c5e)
+++ b/components/auth/AuthButton.tsx	(date 1758901362496)
@@ -18,7 +18,7 @@
       try {
         const response = await getUserProfile()
         if (response.success && response.data) {
-          setUser(response.data)
+          setUser(response?.data)
         }
       } catch (error) {
         setUser(null)
Index: .env.local
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Supabase Configuration\r\n# Your Supabase project credentials\r\n\r\nNEXT_PUBLIC_SUPABASE_URL=https://jaylcuvsaucgnmhmwynr.supabase.co\r\n\r\nNEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpheWxjdXZzYXVjZ25taG13eW5yIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg1Mzk5OTQsImV4cCI6MjA3NDExNTk5NH0.X2UcpArHWSraI0smAIpPH4ErA_AkT0gdfBtkapc0NJ0\r\n\r\n# You need to add your service role key from Supabase Dashboard > Settings > API\r\n# SUPABASE_SERVICE_ROLE_KEY=NEXT_PUBLIC_SUPABASE_URL=https://jaylcuvsaucgnmhmwynr.supabase.co\r\n\r\nNEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpheWxjdXZzYXVjZ25taG13eW5yIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg1Mzk5OTQsImV4cCI6MjA3NDExNTk5NH0.X2UcpArHWSraI0smAIpPH4ErA_AkT0gdfBtkapc0NJ0\r\n\r\n# Resender API Key for email notifications\r\nRESEND_API_KEY=re_xYPwTpGD_JxEqRbnXMS4Jx6D5mqdYH3si\r\n\r\n# Disable Google Fonts optimization to prevent build-time network issues\r\nNEXT_FONT_GOOGLE_OPTIMIZE_FILE=false
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.env.local b/.env.local
--- a/.env.local	(revision 911811e8c35d37bf2e7329a689e0b8b592487c5e)
+++ b/.env.local	(date 1758901099879)
@@ -5,10 +5,7 @@
 
 NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpheWxjdXZzYXVjZ25taG13eW5yIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg1Mzk5OTQsImV4cCI6MjA3NDExNTk5NH0.X2UcpArHWSraI0smAIpPH4ErA_AkT0gdfBtkapc0NJ0
 
-# You need to add your service role key from Supabase Dashboard > Settings > API
-# SUPABASE_SERVICE_ROLE_KEY=NEXT_PUBLIC_SUPABASE_URL=https://jaylcuvsaucgnmhmwynr.supabase.co
-
-NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpheWxjdXZzYXVjZ25taG13eW5yIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg1Mzk5OTQsImV4cCI6MjA3NDExNTk5NH0.X2UcpArHWSraI0smAIpPH4ErA_AkT0gdfBtkapc0NJ0
+SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpheWxjdXZzYXVjZ25taG13eW5yIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1ODUzOTk5NCwiZXhwIjoyMDc0MTE1OTk0fQ.V5Zas8jPfyJj5wbgC2SD4R6FS9A8Gg2n_BFZPdRZbUE
 
 # Resender API Key for email notifications
 RESEND_API_KEY=re_xYPwTpGD_JxEqRbnXMS4Jx6D5mqdYH3si
Index: app/admin/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { supabase } from '@/lib/supabase'\r\nimport AdminDashboard from '@/components/admin/AdminDashboard'\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\r\nimport { Button } from '@/components/ui/button'\r\nimport Link from 'next/link'\r\nimport { redirect } from 'next/navigation'\r\n\r\nexport const dynamic = 'force-dynamic'\r\n\r\nexport default async function AdminPage() {\r\n  const { data: { user } } = await supabase.auth.getUser()\r\n  \r\n  if (!user) {\r\n    redirect('/')\r\n  }\r\n\r\n  // Check if user is an admin of any restaurant\r\n  const { data: restaurants } = await supabase\r\n    .from('restaurants')\r\n    .select('*')\r\n    .eq('admin_id', user.id)\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-slate-50\">\r\n      <header className=\"border-b bg-white\">\r\n        <div className=\"container mx-auto px-4 py-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <h1 className=\"text-2xl font-bold\">Restaurant Admin Dashboard</h1>\r\n            <Button variant=\"outline\" asChild>\r\n              <Link href=\"/\">Back to Home</Link>\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        {restaurants && restaurants.length > 0 ? (\r\n          <AdminDashboard restaurants={restaurants} />\r\n        ) : (\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>No Restaurant Access</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <p className=\"text-muted-foreground mb-4\">\r\n                You don't have admin access to any restaurants. Contact support if you believe this is an error.\r\n              </p>\r\n              <Button asChild>\r\n                <Link href=\"/\">Browse Restaurants</Link>\r\n              </Button>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/admin/page.tsx b/app/admin/page.tsx
--- a/app/admin/page.tsx	(revision 911811e8c35d37bf2e7329a689e0b8b592487c5e)
+++ b/app/admin/page.tsx	(date 1758901099827)
@@ -43,7 +43,7 @@
             </CardHeader>
             <CardContent>
               <p className="text-muted-foreground mb-4">
-                You don't have admin access to any restaurants. Contact support if you believe this is an error.
+                You don&#39;t have admin access to any restaurants. Contact support if you believe this is an error.
               </p>
               <Button asChild>
                 <Link href="/">Browse Restaurants</Link>
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1758901099861)
+++ b/.idea/.gitignore	(date 1758901099861)
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
